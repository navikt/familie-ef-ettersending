"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const PT = __importStar(require("prop-types"));
const nav_frontend_js_utils_1 = require("nav-frontend-js-utils");
require("nav-frontend-skjema-style");
const classnames_1 = __importDefault(require("classnames"));
class ToggleKnapp extends React.Component {
    render() {
        const { children, name, defaultChecked, value, onChange, checked, className, } = this.props;
        if (checked !== undefined && !onChange) {
            // Trenger bare onChange om man definerer checked
            console.warn(`onChange har verdien: ${onChange}`);
        }
        const knappId = nav_frontend_js_utils_1.guid();
        const cls = (classes) => classnames_1.default("toggle__label", classes);
        return (React.createElement("div", null,
            React.createElement("input", { type: "radio", className: "toggle__input sr-only", defaultChecked: defaultChecked, onChange: onChange, name: name, id: knappId, value: value, checked: checked, "aria-checked": checked }),
            React.createElement("label", { className: cls(className), htmlFor: knappId }, children)));
    }
}
ToggleKnapp.defaultProps = {
    defaultChecked: undefined,
    checked: undefined,
    className: undefined,
    onChange: undefined,
    name: "ToggleKnapp-default-name",
};
ToggleKnapp.propTypes = {
    /**
     * Innhold i label
     */
    children: PT.node.isRequired,
    /**
     * Navnet som brukes på radio knappen
     */
    name: PT.string,
    /**
     * Funksjon som håndterer endring av valgt knapp.
     * Funksjonen tar event. Iden til det klikkede elementet ligger på e.target.value
     * onChange kalles hver gang en knapp blir trykket.
     */
    onChange: PT.func,
    /**
     * Mulighet til å oppgi iden til en knapp som vil være satt som default
     */
    defaultChecked: PT.bool,
    /**
     * Value som brukes på alle ToggleKnapper i gruppen
     */
    value: PT.string.isRequired,
    /**
     * Marker en knapp som valgt
     */
    checked: PT.bool,
    /**
     * Classname
     */
    className: PT.string,
};
exports.default = ToggleKnapp;
