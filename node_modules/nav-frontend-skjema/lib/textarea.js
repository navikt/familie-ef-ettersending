"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const PT = __importStar(require("prop-types"));
const React = __importStar(require("react"));
const classnames_1 = __importDefault(require("classnames"));
const nav_frontend_js_utils_1 = require("nav-frontend-js-utils");
const _1 = require(".");
const skjemaelement_feilmelding_1 = __importDefault(require("./skjemaelement-feilmelding"));
require("nav-frontend-skjema-style");
const inputCls = (className, harFeil) => classnames_1.default(className, "skjemaelement__input textarea--medMeta", {
    "skjemaelement__input--harFeil": harFeil,
});
const tellerTekstCls = (remaining) => classnames_1.default("teller-tekst", {
    "teller-tekst--overflow": remaining < 0,
});
/**
 * Selvekspanderende tekstområde med teller
 */
class Textarea extends React.Component {
    constructor(props) {
        super(props);
        this.mirror = null;
        this.tekstomrade = null;
        this.textareaId = this.props.id || nav_frontend_js_utils_1.guid();
        this.maxTegnId = this.props.maxLength ? nav_frontend_js_utils_1.guid() : undefined;
        this.descriptionId = this.props.description ? nav_frontend_js_utils_1.guid() : undefined;
        this.describedbyId = [this.descriptionId, this.maxTegnId]
            .filter((id) => !!id)
            .join(" ");
        nav_frontend_js_utils_1.autobind(this);
    }
    componentDidMount() {
        // @ts-ignore
        nav_frontend_js_utils_1.requestAnimationFrame.call(window, this.updateHeight, 0);
    }
    componentDidUpdate(prevProps) {
        if (prevProps.value !== this.props.value) {
            this.updateHeight();
        }
    }
    updateHeight() {
        if (this.mirror && this.tekstomrade) {
            this.mirror.textContent = `${this.tekstomrade.value} `;
            // eslint-disable-next-line no-param-reassign
            this.tekstomrade.style.height = `${this.mirror.offsetHeight + 25}px`;
        }
    }
    render() {
        const _a = this.props, { label, description, maxLength, textareaClass, id, name, feil, tellerTekst, textareaRef, onChange } = _a, other = __rest(_a, ["label", "description", "maxLength", "textareaClass", "id", "name", "feil", "tellerTekst", "textareaRef", "onChange"]);
        const antallTegn = other.value.length;
        return (React.createElement(_1.SkjemaGruppeFeilContext.Consumer, null, (context) => {
            const feilmelding = context.feil || feil;
            const feilmeldingId = context.feilmeldingId || nav_frontend_js_utils_1.guid();
            return (React.createElement("div", { className: "skjemaelement textarea__container" },
                label && React.createElement(_1.Label, { htmlFor: this.textareaId }, label),
                description && (React.createElement("div", { className: "skjemaelement__description", id: this.descriptionId }, description)),
                React.createElement("div", { className: "textarea--medMeta__wrapper" },
                    !!this.props.maxLength && (React.createElement("span", { id: this.maxTegnId, className: "sr-only" },
                        "Tekstomr\u00E5de med plass til ",
                        this.props.maxLength,
                        " tegn.")),
                    React.createElement(nav_frontend_js_utils_1.EventThrottler, { event: "resize", callback: this.updateHeight, delay: 100 },
                        React.createElement("textarea", Object.assign({ ref: (textarea) => {
                                this.tekstomrade = textarea;
                                if (textareaRef !== undefined)
                                    textareaRef(textarea);
                            }, onChange: onChange, className: inputCls(textareaClass, feilmelding), id: this.textareaId, name: name, style: { height: "30px" }, "aria-invalid": !!feilmelding, "aria-errormessage": feilmelding ? feilmeldingId : undefined, "aria-describedby": this.describedbyId }, other))),
                    React.createElement(Teller, { antallTegn: antallTegn, maxLength: maxLength, tellerTekst: tellerTekst })),
                !context.feil && !!feil && (React.createElement(skjemaelement_feilmelding_1.default, { id: feilmeldingId }, typeof feilmelding !== "boolean" && feilmelding)),
                React.createElement("div", { className: "textareamirror", ref: (mirror) => {
                        this.mirror = mirror;
                    }, "aria-hidden": "true" })));
        }));
    }
}
Textarea.propTypes = {
    /**
     * Ledetekst for tekstområdet
     */
    label: PT.node,
    /**
     * Ekstrainformasjon under overskrift
     */
    description: PT.node,
    /**
     * Maks antal tegn som kan skrives inn i tekstområdet
     */
    maxLength: PT.number,
    /**
     * Teksten som er skrevet inn i tekstområdet.
     */
    value: PT.string.isRequired,
    /**
     * Klassenavn for tekstomnrådet
     */
    textareaClass: PT.string,
    /**
     * Id for tekstområdet, settes til name eller random guid hvis prop ikke er satt
     */
    id: PT.string,
    /**
     * Navn for tekstområdet, settes til id eller random guid hvis prop ikke er satt
     */
    name: PT.string,
    /**
     * Optional onChange handler
     */
    onChange: PT.func.isRequired,
    /**
     * Hvis skjemaet har feil sender man inn et objekt med en feilmelding
     */
    feil: PT.oneOfType([PT.node, PT.bool]),
    /**
     * Funksjon for å generere tellerteksten som vises nede i høyre hjørne
     */
    tellerTekst: PT.func,
    /**
     * Referanse til selve textareafeltet. Brukes for eksempel til å sette fokus
     */
    textareaRef: PT.func,
};
Textarea.defaultProps = {
    maxLength: 2000,
    textareaClass: "",
    id: undefined,
    name: undefined,
    feil: undefined,
    // eslint-disable-next-line no-use-before-define
    tellerTekst: defaultTellerTekst,
    textareaRef: undefined,
    label: "",
    description: "",
};
const Teller = (props) => {
    if (props.maxLength <= 0) {
        return null;
    }
    return (React.createElement("p", { className: "textarea--medMeta__teller" }, props.tellerTekst(props.antallTegn, props.maxLength)));
};
function defaultTellerTekst(antallTegn, maxLength) {
    const difference = maxLength - antallTegn;
    return (React.createElement("span", { className: tellerTekstCls(difference), "aria-live": "polite" },
        difference >= 0 && `Du har ${difference} tegn igjen`,
        difference < 0 && `Du har ${Math.abs(difference)} tegn for mye`));
}
exports.default = Textarea;
