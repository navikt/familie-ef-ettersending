"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const PT = __importStar(require("prop-types"));
require("nav-frontend-skjema-style");
const classnames_1 = __importDefault(require("classnames"));
class ToggleGruppe extends React.Component {
    render() {
        const { children, name, onChange, className } = this.props;
        const cls = (classes) => classnames_1.default("toggle", classes);
        return (React.createElement("div", { className: cls(className) }, children.map((toggleKnapp) => React.cloneElement(toggleKnapp, {
            name,
            onChange,
            key: toggleKnapp.props.value,
        }))));
    }
}
ToggleGruppe.defaultProps = {
    className: "",
    onChange: undefined,
};
ToggleGruppe.propTypes = {
    /**
     * Et sett med ToggleKnapp-er
     */
    children: PT.node.isRequired,
    /**
     * className
     */
    className: PT.string,
    /**
     * Navnet som brukes på radio button gruppen
     */
    name: PT.string.isRequired,
    /**
     * Funksjon som håndterer endring av valgt knapp.
     * Funksjonen tar event. Iden til det klikkede elementet ligger på e.target.value
     * onChange kalles hver gang en knapp blir trykket.
     */
    onChange: PT.func,
};
exports.default = ToggleGruppe;
