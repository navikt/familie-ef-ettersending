"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventThrottler = void 0;
const PT = __importStar(require("prop-types"));
const React = __importStar(require("react"));
const lodash_throttle_1 = __importDefault(require("lodash.throttle"));
class EventThrottler extends React.Component {
    componentDidMount() {
        this.throttled = lodash_throttle_1.default(this.props.callback, this.props.delay, {
            leading: false,
        });
        window.addEventListener(this.props.event, this.throttled);
    }
    componentWillUnmount() {
        if (this.throttled) {
            window.removeEventListener(this.props.event, this.throttled);
        }
    }
    render() {
        return this.props.children;
    }
}
exports.EventThrottler = EventThrottler;
EventThrottler.propTypes = {
    children: PT.oneOfType([PT.arrayOf(PT.node), PT.node]).isRequired,
    callback: PT.func.isRequired,
    delay: PT.number,
    event: PT.oneOf(["resize"]).isRequired,
};
EventThrottler.defaultProps = {
    callback: () => { },
    delay: 0,
};
