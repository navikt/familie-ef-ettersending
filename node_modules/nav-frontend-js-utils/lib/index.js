"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.keyCodes = exports.getScrollParents = exports.getViewportDimensions = exports.clamp = exports.requestAnimationFrame = exports.omit = exports.addPropToObject = exports.fn = exports.guid = exports.autobind = void 0;
function autobind(ctx) {
    Object.getOwnPropertyNames(ctx.constructor.prototype)
        .filter((prop) => typeof ctx[prop] === "function")
        .forEach((method) => {
        ctx[method] = ctx[method].bind(ctx);
    });
}
exports.autobind = autobind;
function s4() {
    return Math.floor((1 + Math.random()) * 0x10000)
        .toString()
        .substring(1);
}
function guid() {
    return `${s4()}${s4()}-${s4()}-${s4()}-${s4()}-${s4()}${s4()}${s4()}`;
}
exports.guid = guid;
function fn(value) {
    return typeof value === "function" ? value : () => value;
}
exports.fn = fn;
function addPropToObject(obj, [key, value]) {
    obj[key] = value;
    return obj;
}
exports.addPropToObject = addPropToObject;
function omit(obj, ...props) {
    return Object.entries(obj)
        .filter(([key]) => !props.includes(key))
        .reduce(addPropToObject, {});
}
exports.omit = omit;
function nativeRaf() {
    if (typeof window !== "undefined") {
        return window.requestAnimationFrame || window.webkitRequestAnimationFrame;
    }
    return undefined;
}
function polyfillRaf() {
    return (callback, element, delay) => {
        setTimeout(callback, delay || 1000 / 60, new Date().getTime());
    };
}
exports.requestAnimationFrame = nativeRaf() || polyfillRaf();
function clamp(lower, upper, numberish) {
    const num = parseFloat(numberish.toString());
    if (num < lower)
        return lower;
    if (num > upper)
        return upper;
    return num;
}
exports.clamp = clamp;
function getViewportDimensions() {
    return {
        w: Math.max(document.documentElement.clientWidth, window.innerWidth || 0),
        h: Math.max(document.documentElement.clientHeight, window.innerHeight || 0),
    };
}
exports.getViewportDimensions = getViewportDimensions;
function getScrollParents(element) {
    let parent;
    const arr = [];
    const overflowRegex = /(auto|scroll)/;
    for (parent = element; parent !== document.body; parent = parent.parentElement) {
        const style = getComputedStyle(parent);
        if (overflowRegex.test(style.overflow + style.overflowY + style.overflowX)) {
            arr.push(parent);
        }
    }
    arr.push(window);
    return arr;
}
exports.getScrollParents = getScrollParents;
exports.keyCodes = {
    tab: 9,
    enter: 13,
    space: 32,
    pageup: 33,
    pagedown: 34,
    end: 35,
    home: 36,
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    esc: 27,
};
var eventThrottler_1 = require("./eventThrottler");
Object.defineProperty(exports, "EventThrottler", { enumerable: true, get: function () { return eventThrottler_1.EventThrottler; } });
