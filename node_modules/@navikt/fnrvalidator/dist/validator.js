'use strict';

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var elevenDigits = new RegExp('^\\d{11}$');

var fnr = function fnr(digits) {
  return idnr(digits);
};

var dnr = function dnr(digits) {
  return idnr(digits);
};

var idnr = function idnr(digits) {
  var isDnr = digits.substring(0, 1) >= 4;
  return validate(digits, isDnr);
};

var validate = function validate(digits, isDnr) {
  if (!elevenDigits.test(digits)) {
    return {
      status: "invalid",
      reasons: ["fnr or dnr must consist of 11 digits"]
    };
  }

  var errMsgs = [].concat(_toConsumableArray(checksums(digits)), _toConsumableArray(birthdate(digits, isDnr)));
  return errMsgs.length == 0 ? {
    status: "valid",
    type: isDnr ? 'dnr' : 'fnr'
  } : {
    status: "invalid",
    reasons: errMsgs
  };
};

var checksums = function checksums(digits) {
  var k1 = 11 - (3 * digits[0] + 7 * digits[1] + 6 * digits[2] + 1 * digits[3] + 8 * digits[4] + 9 * digits[5] + 4 * digits[6] + 5 * digits[7] + 2 * digits[8]) % 11;
  var k2 = 11 - (5 * digits[0] + 4 * digits[1] + 3 * digits[2] + 2 * digits[3] + 7 * digits[4] + 6 * digits[5] + 5 * digits[6] + 4 * digits[7] + 3 * digits[8] + 2 * k1) % 11;
  if (k1 === 11) k1 = 0;
  if (k2 === 11) k2 = 0;
  return k1 < 10 && k2 < 10 && k1 == digits[9] && k2 == digits[10] ? [] : ["checksums don't match"];
}; // copied from https://stackoverflow.com/questions/5812220/how-to-validate-a-date


var birthdate = function birthdate(digits, isDnr) {
  if (isDnr) {
    digits = digits.substring(0, 1) - 4 + digits.substring(1);
  }

  var day = digits.substring(0, 2);
  var month = digits.substring(2, 4);
  var year = digits.substring(4, 6); // set year 00 default to 2000 instead of 1900

  var date = new Date(year === '00' ? '2000' : year, month - 1, day);
  return date && date.getMonth() + 1 == month && date.getDate() == day ? [] : ["invalid date"];
};

exports.fnr = fnr;
exports.dnr = dnr;
exports.idnr = idnr;